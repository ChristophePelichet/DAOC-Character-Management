"""
Script simple pour t√©l√©charger ChromeDriver (sans d√©pendances externes)
"""

import os
import urllib.request
import zipfile
import subprocess
from pathlib import Path

def get_chrome_version():
    """R√©cup√®re la version de Chrome install√©e"""
    try:
        chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"
        if not os.path.exists(chrome_path):
            chrome_path = r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
        
        if os.path.exists(chrome_path):
            result = subprocess.run(
                [chrome_path, "--version"],
                capture_output=True,
                text=True
            )
            version = result.stdout.strip().split()[-1]
            print(f"‚úì Version Chrome d√©tect√©e: {version}")
            return version
        else:
            print("‚ùå Chrome non trouv√©")
            return None
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return None

def download_chromedriver():
    """T√©l√©charge ChromeDriver"""
    try:
        print("\n" + "=" * 60)
        print("   T√©l√©chargement de ChromeDriver")
        print("=" * 60 + "\n")
        
        chrome_version = get_chrome_version()
        
        if not chrome_version:
            print("\n‚ö†Ô∏è  Impossible de d√©tecter Chrome")
            print("T√©l√©chargement de la derni√®re version stable...")
        
        # URL de t√©l√©chargement direct (derni√®re version stable)
        print("\nüì• R√©cup√©ration des informations...")
        
        # On va chercher la derni√®re version stable
        api_url = "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"
        
        try:
            with urllib.request.urlopen(api_url, timeout=10) as response:
                import json
                data = json.loads(response.read().decode())
                
                stable = data['channels']['Stable']
                version = stable['version']
                
                # Trouver l'URL Windows 64
                downloads = stable['downloads']['chromedriver']
                win64_url = None
                
                for download in downloads:
                    if download['platform'] == 'win64':
                        win64_url = download['url']
                        break
                
                if not win64_url:
                    raise Exception("URL Windows non trouv√©e")
                
                print(f"‚úì Version stable: {version}")
                print(f"üì• URL: {win64_url}\n")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Impossible d'acc√©der √† l'API: {e}")
            print("‚ùå √âCHEC: Impossible de t√©l√©charger automatiquement\n")
            print("=" * 60)
            print("SOLUTION MANUELLE:")
            print("=" * 60)
            print("1. Allez sur: https://googlechromelabs.github.io/chrome-for-testing/")
            print("2. T√©l√©chargez 'chromedriver' pour 'win64' (Stable)")
            print("3. Extrayez le ZIP")
            print("4. Copiez 'chromedriver.exe' √† la racine du projet")
            print(f"   (ici: {Path.cwd()})")
            print("=" * 60)
            return False
        
        # T√©l√©charger
        zip_path = Path("chromedriver-win64.zip")
        print(f"‚è¨ T√©l√©chargement en cours...")
        
        def report_progress(block_num, block_size, total_size):
            downloaded = block_num * block_size
            if total_size > 0:
                percent = min(100, (downloaded / total_size) * 100)
                print(f"\r  Progression: {percent:.1f}% ({downloaded // 1024} Ko / {total_size // 1024} Ko)", end='', flush=True)
        
        urllib.request.urlretrieve(win64_url, zip_path, report_progress)
        print(f"\n‚úì T√©l√©chargement termin√©: {zip_path}\n")
        
        # Extraire
        print("üì¶ Extraction...")
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(".")
        print("‚úì Extraction termin√©e")
        
        # D√©placer
        extracted_path = Path("chromedriver-win64/chromedriver.exe")
        target_path = Path("chromedriver.exe")
        
        if extracted_path.exists():
            if target_path.exists():
                print(f"\n‚ö†Ô∏è  {target_path} existe d√©j√†")
                response = input("√âcraser? (o/n): ").strip().lower()
                if response != 'o':
                    print("‚ùå Annul√©")
                    return False
                target_path.unlink()
            
            import shutil
            shutil.copy2(extracted_path, target_path)
            print(f"‚úì Copi√© vers: {target_path.absolute()}")
            
            # Nettoyer
            shutil.rmtree("chromedriver-win64", ignore_errors=True)
            zip_path.unlink(missing_ok=True)
            print("‚úì Nettoyage termin√©")
            
            print("\n" + "=" * 60)
            print("   ‚úÖ Installation r√©ussie!")
            print("=" * 60)
            print(f"üìç ChromeDriver install√©: {target_path.absolute()}")
            print("\nüí° Vous pouvez maintenant utiliser la g√©n√©ration de cookies")
            print("=" * 60)
            return True
        else:
            print(f"‚ùå Fichier non trouv√©: {extracted_path}")
            return False
            
    except urllib.error.URLError as e:
        print(f"\n‚ùå Erreur r√©seau: {e}")
        print("\n" + "=" * 60)
        print("SOLUTIONS POSSIBLES:")
        print("=" * 60)
        print("1. V√©rifiez votre connexion Internet")
        print("2. V√©rifiez firewall/proxy")
        print("3. T√©l√©chargement manuel:")
        print("   https://googlechromelabs.github.io/chrome-for-testing/")
        print("   ‚Üí T√©l√©chargez 'chromedriver' win64")
        print("   ‚Üí Extrayez et copiez chromedriver.exe ici")
        print("=" * 60)
        return False
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    try:
        success = download_chromedriver()
        if not success:
            input("\n‚è∏Ô∏è  Appuyez sur Entr√©e pour fermer...")
    except KeyboardInterrupt:
        print("\n\n‚ùå Interrompu par l'utilisateur")
        input("‚è∏Ô∏è  Appuyez sur Entr√©e pour fermer...")
