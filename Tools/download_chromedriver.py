"""
Script pour t√©l√©charger ChromeDriver manuellement
Utile si webdriver-manager ne peut pas acc√©der √† googlechromelabs.github.io
"""

import os
import sys
import requests
import zipfile
import subprocess
from pathlib import Path

def get_chrome_version():
    """R√©cup√®re la version de Chrome install√©e"""
    try:
        # Windows
        chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"
        if not os.path.exists(chrome_path):
            chrome_path = r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
        
        if os.path.exists(chrome_path):
            result = subprocess.run(
                [chrome_path, "--version"],
                capture_output=True,
                text=True
            )
            version = result.stdout.strip().split()[-1]
            major_version = version.split('.')[0]
            return major_version
        else:
            print("‚ùå Chrome non trouv√© dans les emplacements standards")
            return None
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de la version Chrome: {e}")
        return None

def download_chromedriver(chrome_version=None):
    """T√©l√©charge ChromeDriver compatible avec la version de Chrome"""
    try:
        if chrome_version is None:
            chrome_version = get_chrome_version()
            if chrome_version is None:
                print("\n‚ö†Ô∏è  Impossible de d√©tecter la version de Chrome")
                chrome_version = input("Entrez la version majeure de Chrome (ex: 119): ").strip()
        
        print(f"\nüì• T√©l√©chargement de ChromeDriver pour Chrome {chrome_version}...")
        
        # URL de l'API pour trouver la bonne version
        api_url = "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"
        
        print(f"üîç Recherche de la version compatible...")
        response = requests.get(api_url, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        # Trouver la version stable
        channels = data.get('channels', {})
        stable = channels.get('Stable', {})
        version = stable.get('version', '')
        
        if not version:
            raise Exception("Version stable non trouv√©e dans l'API")
        
        print(f"‚úì Version trouv√©e: {version}")
        
        # Trouver le lien de t√©l√©chargement pour Windows
        downloads = stable.get('downloads', {}).get('chromedriver', [])
        win64_url = None
        
        for download in downloads:
            if download.get('platform') == 'win64':
                win64_url = download.get('url')
                break
        
        if not win64_url:
            raise Exception("URL de t√©l√©chargement Windows non trouv√©e")
        
        print(f"üì• T√©l√©chargement depuis: {win64_url}")
        
        # T√©l√©charger le fichier
        zip_path = Path("chromedriver-win64.zip")
        response = requests.get(win64_url, stream=True, timeout=30)
        response.raise_for_status()
        
        with open(zip_path, 'wb') as f:
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
                downloaded += len(chunk)
                if total_size > 0:
                    percent = (downloaded / total_size) * 100
                    print(f"\rT√©l√©chargement: {percent:.1f}%", end='', flush=True)
        
        print(f"\n‚úì T√©l√©chargement termin√©: {zip_path}")
        
        # Extraire le fichier
        print("üì¶ Extraction...")
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(".")
        
        # D√©placer chromedriver.exe √† la racine
        extracted_path = Path("chromedriver-win64/chromedriver.exe")
        target_path = Path("../chromedriver.exe")  # Dossier parent (racine du projet)
        
        if extracted_path.exists():
            if target_path.exists():
                print(f"‚ö†Ô∏è  {target_path} existe d√©j√†")
                overwrite = input("√âcraser? (o/n): ").strip().lower()
                if overwrite != 'o':
                    print("‚ùå Op√©ration annul√©e")
                    return False
            
            # Copier le fichier
            import shutil
            shutil.copy2(extracted_path, target_path)
            print(f"‚úì ChromeDriver copi√© vers: {target_path.absolute()}")
            
            # Nettoyer
            shutil.rmtree("chromedriver-win64", ignore_errors=True)
            zip_path.unlink(missing_ok=True)
            print("‚úì Fichiers temporaires nettoy√©s")
            
            print("\n‚úÖ ChromeDriver install√© avec succ√®s!")
            print(f"üìç Emplacement: {target_path.absolute()}")
            print("\nüí° Vous pouvez maintenant utiliser la g√©n√©ration de cookies")
            return True
        else:
            print(f"‚ùå Fichier extrait non trouv√©: {extracted_path}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"\n‚ùå Erreur r√©seau: {e}")
        print("\nüí° Solutions:")
        print("  1. V√©rifiez votre connexion Internet")
        print("  2. V√©rifiez les param√®tres firewall/proxy")
        print("  3. T√©l√©chargez manuellement depuis:")
        print("     https://googlechromelabs.github.io/chrome-for-testing/")
        return False
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("   T√©l√©chargement de ChromeDriver")
    print("=" * 60)
    
    success = download_chromedriver()
    
    if success:
        print("\n" + "=" * 60)
        print("   Installation termin√©e avec succ√®s!")
        print("=" * 60)
    else:
        print("\n" + "=" * 60)
        print("   √âchec de l'installation")
        print("=" * 60)
        sys.exit(1)
